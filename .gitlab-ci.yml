image: python:3.11-alpine

stages:
  - build
  - linttest
  - covtest
  - package
  - deploy

build-job:
  stage: build
  variables:
    DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY_GITLAB
    SENTRY_DSN: $SENTRY_DSN_GITLAB
    DJANGO_STATUS: $DJANGO_STATUS_DEV_GITLAB
  script:
    - printenv
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python replace_config.py
    - echo "Compile complete."

lint-test-job:
  stage: linttest
  variables:
    DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY_GITLAB
    SENTRY_DSN: $SENTRY_DSN_GITLAB
    DJANGO_STATUS: $DJANGO_STATUS_DEV_GITLAB
  script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python replace_config.py
    - flake8
    - echo "Linting complete."
  rules:
    - allow_failure: false

unit-test-job:
  stage: covtest
  variables:
    DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY_GITLAB
    SENTRY_DSN: $SENTRY_DSN_GITLAB
    DJANGO_STATUS: $DJANGO_STATUS_DEV_GITLAB
  script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python replace_config.py
    - pytest --cov=.
    - coverage report --fail-under=80
    - echo "Test with coverage >= 80 complete."
  rules:
    - allow_failure: false

package-job:
  stage: package
  only: 
    - master
  services:
    - docker:dind
  before_script:
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  variables:
    DOCKER_HOST: tcp://docker:2375
    DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY_GITLAB
    SENTRY_DSN: $SENTRY_DSN_GITLAB
    DJANGO_STATUS: $DJANGO_STATUS_PROD_GITLAB
  script:
    - apk add --no-cache docker
    - apk add --no-cache build-base libffi-dev openssl-dev
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --build-arg DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY_GITLAB --build-arg SENTRY_DSN=$SENTRY_DSN_GITLAB --build-arg DJANGO_STATUS=$DJANGO_STATUS_PROD_GITLAB .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $DOCKER_REGISTRY_IMAGE:latest
    - docker push $DOCKER_REGISTRY_IMAGE:latest
    - echo $(aws ecr get-login-password --region $AWS_DEFAULT_REGION) | docker login --username AWS --password-stdin $CI_AWS_ECR_REGISTRY
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_AWS_ECR_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_AWS_ECR_IMAGE:$CI_COMMIT_SHA


deploy-job:
  stage: deploy
  only: 
    - master
  environment: production
  before_script:
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  script:
  - sed -i "s|imagearemplacer|${CI_AWS_ECR_IMAGE}:${CI_COMMIT_SHA}|g" task-definition.json
  - echo "Deploying application..."
  - aws ecs register-task-definition --cli-input-json file://task-definition.json
  - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --task-definition jinx-oc-task-def --force-new-deployment
  - echo "Application successfully deployed."
